@using WhiteBears.Models
@model DashboardModel
@{
    ViewBag.msg = "Dashboard";
    DashboardModel dm = new DashboardModel();
}


@Styles.Render("~/bundles/style/dashboard")
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.bundle.js"></script>
@Scripts.Render("~/bundles/scripts/chartjs")
<script>
    function sortTable(n, isTaskTable) {
        var table, rows, switching, i, first, second, shouldSwitch, direction, switchcount = 0;
        table = document.getElementById(isTaskTable ? "tasktable" : "notestable");
        switching = true;

        direction = "asc";

        while (switching) {
            switching = false;
            rows = table.rows;

            for (i = 1; i < (rows.length - 1); i++) {
                shouldSwitch = false;

                first = rows[i].getElementsByTagName("TD")[n];
                second = rows[i + 1].getElementsByTagName("TD")[n];

                if (direction == "asc") {
                    if (first.innerHTML.toLowerCase() > second.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (direction == "desc") {
                    if (first.innerHTML.toLowerCase() < second.innerHTML.toLowerCase()) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
            } else {
                if (switchcount == 0 && direction == "asc") {
                    direction = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
<div id="MainPage">
    <nav id="LeftPanel">
        <div class="LeftPanelBorder" id="UserInfoContainer">
            <div id="UserInfo">
                <img id="profilePic" src="https://image.freepik.com/free-icon/male-user-profile-picture_318-37825.jpg" /><br /><br />
                <label>@Html.DisplayFor(m => m.CurrentUser.FullName)</label><br />
                <label>@Html.DisplayFor(m => m.CurrentUser.Role)</label><br />
                <label>@Model.CurrDate.ToString("MM/dd/yyyy")</label>
            </div>
        </div>

        <div class="LeftPanelBorder" id="ProjectListContainer" style="overflow-y:scroll">
            @if (Model.CurrentUser.Role.Equals("Project Manager"))
            {
                <button class="ProjectButtons btn-secondary" onclick="location.href='@Url.Action("Index", "AddProject")'">Add project</button>
            }
            <div id="ProjectList">
                <label>Projects</label> <br />
                @foreach (var project in Model.Projects)
                {
                    <button class="ProjectButtons btn-secondary" onclick="location.href='@Url.Action("Index", "Project", new { id = project.ProjectId})'">@project.Title</button>;
                }
            </div>
        </div>
    </nav>


    <header>
        <div id="headings">
            <h2>Personal Dashboard</h2>
            <h3>Here's an overview of your projects</h3>
        </div>
        <form id="projectselection" class="text-center">
            <span class="padding-5px">
                <label class="radio-inline">
                    <input type="radio" name="optradio" value="_all" checked>All
                </label>

                @foreach (var project in Model.Projects)
                {
                    <label class="radio-inline">
                        <input type="radio" name="optradio" value="@project.ProjectId">@project.Title
                    </label>
                }
            </span>
        </form>
    </header>


    <div id="TasksSection">
        <label>Tasks</label>
        <div class="scrollable-task">
            <table id="tasktable" class="table table-hover">
                <tr>
                    <th scope="col" onclick="sortTable(0, true)">Task</th>
                    <th scope="col" onclick="sortTable(1, true)">Priority</th>
                    <th scope="col" onclick="sortTable(2, true)">Due Date</th>
                    <th scope="col" onclick="sortTable(3, true)">Status</th>
                    <th scope="col" onclick="sortTable(4, true)">Project</th>
                </tr>
                <tbody id="taskTableBody">

                    @foreach (var project in Model.Projects)
                    {
                        foreach (var task in project.Tasks)
                        {
                            <tr>
                                <td>@task.Title</td>
                                <td>@task.Priority</td>
                                <td>@task.DueDate.ToString("MM/dd/yyyy")</td>
                                <td>@task.Status</td>
                                <td>@project.Title</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div id="TaskOverviewSection">
        <canvas id="pie-chartcanvas"></canvas>

    </div>
    <div id="PersonalNotesSection">
        <div>
            <label>Personal Notes</label>
            <div class="scrollable-notes" id="PersonalNotesTable">
                <table id="notestable" class="table table-hover">
                    <tr>
                        <th onclick="sortTable(0, false)">Date</th>
                        <th onclick="sortTable(1, false)">Note</th>
                    </tr>
                    @foreach (var note in Model.CurrentUser.PersonalNotes)
                    {
                        <tr id="@note.PersonalNoteId" name="PersonalNoteRow">
                            <td>@note.TimeStamp.ToString("MM/dd/yyyy")</td>
                            <td>@note.Information</td>
                        </tr>
                    }
                </table>
            </div>
        </div>

        <textarea id="PersonalNoteText"></textarea><br />
        <div id="PersonalNotesButtonsContainer" class="btn-group">
            <button type="button" class="btn btn-primary btn-lg disabled" value="modify">Modify</button>
            <button type="button" class="btn btn-success btn-lg" value="add">Add</button>
            <button type="button" class="btn btn-danger btn-lg disabled" value="delete">Delete</button>
        </div>
    </div>
    <div class="ProgressBarContainers">
        <div class="ProgressBarContainer">
            <label>Tasks Completed</label>
            <div class="progress">
                <div id="taskProgressBar" class="progress-bar progress-bar-success" role="progressbar" style="width:80%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">50%</div>
            </div>
            <text id="taskProgressStatus" class="text-large">0/0</text><br />
            <text id="taskProgressRemaining" class="text-medium text-secondary">0 tasks remaining</text>
        </div>

        <div class="ProgressBarContainer">
            <label>Storage Used</label>
            <div class="progress">
                <div class="progress-bar progress-bar-success" role="progressbar" style="width: 10%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">10%</div>
            </div>
            <text class="text-large">100/1000 GB</text><br />
            <text class="text-medium text-secondary">900GB remaining</text>
        </div>
    </div>
</div>
<script>

    $(document).ready(function () {
        loadPercentageBars("_all", "@Model.CurrentUser.Username");
        assignTaskRowClasses();

        var clickedRow = null;
        var addButton = $('button[value=add');
        var modifyButton = $('button[value=modify');
        var deleteButton = $('button[value=delete');
        var noteTextArea = $('#PersonalNoteText');

        $(document).on('click', 'tr[name=PersonalNoteRow]', function () {
            if (addButton.text() != "Save") {
                clickedRow = $(this);

                if (clickedRow.css('background-color') == 'rgb(211, 211, 211)') {
                    clickedRow.css('background-color', 'white');

                    changeButtonState(modifyButton, false);
                    changeButtonState(deleteButton, false);

                    noteTextArea.css('display', 'none');
                } else {
                    $('#PersonalNotesTable table tr').css('background-color', 'white');
                    $('#PersonalNotesTable table tr').removeClass('selected');

                    clickedRow.css('background-color', 'lightgrey');
                    clickedRow.addClass('selected');

                    changeButtonState(modifyButton, true);
                    changeButtonState(deleteButton, true);

                    noteTextArea.css('display', 'none');
                }
            }
        });

        addButton.on('click', function () {
            if (addButton.text() === "Add") {
                noteTextArea.val('');
                noteTextArea.css('display', 'block');
                addButton.text("Save");
                deleteButton.text("Cancel");
                changeButtonState(deleteButton, true);
                changeButtonState(modifyButton, false);
            } else {
                if (isNoteValid()) {
                    $('#PersonalNotesTable > table > tbody:last').append('<tr name="PersonalNoteRow"><td>@Model.CurrDate.ToString("MM/dd/yyyy")</td><td>' + noteTextArea.val() + '</td></tr>');

                    $.ajax({
                        type: "post",
                        url: '@Url.Action("AddNote", "Dashboard")',
                        dataType: "json",
                        data: {
                            input: "" + noteTextArea.val(),
                            username: "@Model.CurrentUser.Username"
                        },
                        success: function (data) {
                            $('#PersonalNotesTable > table > tbody:last tr:last').attr("id", data.message);
                        }
                    });

                    noteTextArea.val('');
                    noteTextArea.css('display', 'none');
                    addButton.text("Add");

                    deleteButton.text("Delete");
                    changeButtonState(deleteButton, false);
                }
            }
        });

        modifyButton.on('click', function () {
            if (modifyButton.text() === "Modify") {
                noteTextArea.css('display', 'block');
                noteTextArea.val($('tr.selected td:last-child').text());
                modifyButton.text("Save");
                deleteButton.text("Cancel");
                changeButtonState(addButton, false);
            } else {
                if (isNoteValid()) {
                    $('tr.selected td:last-child').text(noteTextArea.val());

                    $.ajax({
                        type: "post",
                        url: '@Url.Action("UpdateNote", "Dashboard")',
                        dataType: "json",
                        data: {
                            input: "" + noteTextArea.val(),
                            noteId: ""+clickedRow.attr('id')
                        },
                        success: function (data) {
                        },

                        error: function () {
                            alert("There was an issue updating this note.");
                        }
                    });

                    noteTextArea.val('');
                    noteTextArea.css('display', 'none');
                    modifyButton.text('Modify');
                    deleteButton.text("Delete");
                    changeButtonState(addButton, true);
                }
            }
        });

        deleteButton.on('click', function () {
            if (deleteButton.text() === "Delete") {
                $.ajax({
                        type: "post",
                        url: '@Url.Action("DeleteNote", "Dashboard")',
                        dataType: "json",
                        data: {
                            noteId: ""+clickedRow.attr('id')
                        },
                        success: function (data) {
                        },

                        error: function () {
                            alert("There was an issue deleting this note.");
                        }
                });

                clickedRow.remove();
                changeButtonState(deleteButton, false);
                changeButtonState(modifyButton, false);
            } else {
                noteTextArea.val('');
                noteTextArea.css('display', 'none');

                deleteButton.text('Delete');
                modifyButton.text('Modify');
                addButton.text("Add");
                changeButtonState(deleteButton, false);
                changeButtonState(modifyButton, false);
                changeButtonState(addButton, true);
            }
        })

        function changeButtonState(button, state) {
            if(state)
                button.removeClass('disabled');
            else
                button.addClass('disabled')
        }

        function isNoteValid() {
            if (noteTextArea.val().length < 3) {
                alert("Notes must be at least 3 characters long.");
                return false;
            }

            return true;
        }

        $('input[name=optradio]').on('click', function () {
            var radioValue = $("input[name='optradio']:checked").val();
            var numOfTasks

            $.ajax({
                type: "post",
                url: '@Url.Action("UpdateProject", "Dashboard")',
                dataType: "json",
                data: {
                    projectId: "" + radioValue,
                    sUser: "@Model.CurrentUser.Username"
                },
                success: function (data) {
                    $('#tasktable tbody:last').html(data.row);
                    var tds = $('#tasktable tbody:last').children('tr').length;
                    assignTaskRowClasses();
                    loadPercentageBars(radioValue, "@Model.CurrentUser.Username");
                },

                error: function () {
                    alert("There was an issue with updating the table");
                }
            });
        });

        function loadPercentageBars(projectId, username) {
            $.ajax({
                type: "post",
                url: '@Url.Action("LoadCompletedTasks", "Dashboard")',
                dataType: "json",
                data: {
                    projectId: "" + projectId,
                    username: username
                },
                success: function (data) {

                    var total = data.message.length;
                    var notCompleted = 0;

                    var rawData = {
                        product: []
                    };

                    $.each(data.message, function (index, value) {
                        if (value.IsCompleted == false) {
                            notCompleted++;

                            var dt = new Date();
                            var time = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();

                            if (value.DueDate < dt) {

                            }
                            var date = new Date(parseInt(value.DueDate.substr(6)));

                            if (date < dt) {
                                rawData.product.push({ attribute: "o" })
                            } else {
                                rawData.product.push({ attribute: "o_s" })
                            }
                        } else {
                            var dueDate = new Date(parseInt(value.DueDate.substr(6)));
                            var completedDate = new Date(parseInt(value.CompletedDate.substr(6)));

                            if (dueDate > completedDate) {
                                rawData.product.push({ attribute: "c_o" })
                            } else {
                                rawData.product.push({ attribute: "d_c" })
                            }
                        }
                    })

                    var completed = total - notCompleted;


                    var percentage = (completed / total) * 100
                    percentage = percentage.toFixed(2);

                    if ((percentage == "100.00" && total < 1) || percentage == "NaN") {
                        percentage = 0.00;
                    }

                    $('#taskProgressBar').html(percentage + "%");
                    $('#taskProgressBar').css('width', percentage + '%');
                    $('#taskProgressStatus').html(completed + '/' + total);
                    $('#taskProgressRemaining').html(notCompleted + ' task' + (notCompleted > 1 ? 's' : '') + ' remaining');

                    var onSchedule = 0;
                    var completedOnTime = 0;
                    var delayedCompletion = 0;
                    var overdue = 0;

                    $.each(rawData.product, function (index, value) {
                        if (value.attribute == "o") {
                            overdue = overdue + 1;
                        }

                        if (value.attribute == "o_s") {
                            onSchedule = onSchedule + 1;
                        }

                        if (value.attribute == "c_o") {
                            completedOnTime = completedOnTime + 1;
                        }

                        if (value.attribute == "d_c") {
                            delayedCompletion = delayedCompletion + 1;
                        }
                    })

                    var ctx = $('#pie-chartcanvas')

                    ctx.remove();
                    $('#TaskOverviewSection').append('<canvas id="pie-chartcanvas"><canvas>')

                    var ctx = $('#pie-chartcanvas')

                    var dataArr = [completedOnTime, delayedCompletion, onSchedule, overdue]

                    var data1 = {
                        labels: ["Completed (On Time)", "Completed (Delayed)", "On Schedule", "Overdue"],

                        datasets: [
                            {
                                label: "Task Overview",
                                data: dataArr,
                                backgroundColor: [
                                    "#008b00",
                                    "#ffb732",
                                    "#1a1aff",
                                    "#cd0000",
                                ],
                                borderColor: [
                                    "#008b55",
                                    "#ffb788",
                                    "#1a1fff",
                                    "#cd0088",
                                ],
                                borderWidth: [1, 1, 1, 1]
                            }
                        ]
                    };


                    var options = {
                        title: {
                            display: true,
                            text: 'Task Overview',
                            position: 'top'
                        }, responsive: false,

                        legend: {
                            position: 'right'
                        },

                        plugins: {
                            labels: {
                                render: 'value',
                                fontSize: 14,
                                fontStyle: 'bold',
                                fontColor: '#fff',
                                fontFamily: '"Lucida Console", Monaco, monospace'
                            }
                        }
                    };

                    var myDoughnutChart = new Chart(ctx, {
                        type: 'doughnut',
                        data: data1,
                        options: options
                    });
                },

                error: function () {
                    alert("There was an issue with updating the table");
                }
            });
        }


        function assignTaskRowClasses() {
            $.each($('#tasktable tbody tr td:nth-child(4)'), function (key, value) {
                var status = $(this).text()
                if (status == "Overdue"){
                    $(this).parent().addClass('high-priority');
                }
            })
        }
    })
</script>
