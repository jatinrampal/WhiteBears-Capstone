@using WhiteBears.Models
@model ProjectPageViewModel
@{

    Layout = null;
}



<!DOCTYPE html>

<html>

<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title - Project Page</title>
    @Styles.Render("~/bundles/style/projectpage")
    <link rel="shortcut icon" href="~/Content/icon.ico" />

</head>

<body>

    <div class="container-fluid">

        <div id="row" class="row">
            <div id="topBar" class="col-sm-6">
                <h1 id="topBarTitle">@Model.Project.Title   </h1>
            </div>

            <div class="col-sm-6">
                <button hidden type="button" id="TeamManagement" class="btn btn-info hidden" onclick="location.href='@Url.Action("Index", "TeamManagement", new { id = Model.Project.ProjectId })'">Team Management</button>
            </div>
        </div>

        <div id="startEnd" class="row">


            <h5 id="pStartDate" class="pull-left">Start Date:   @Model.Project.StartDate.ToShortDateString() </h5>
            <h5 class="pull-right" id="pEndDate">End Date:  @Model.Project.DueDate.ToShortDateString() </h5>



        </div>
        <hr id="hr" />
        <div id="row" class="row">
            <span id="projectId" hidden>@Model.Project.ProjectId</span>
            <div id="backButton" class="col-sm-6">
                <span> @Html.ActionLink("Back to Dashboard", "Index", "Dashboard")</span>
            </div>
            <div id="nameDiv" class="col-sm-6">
                <span id="name">@Model.User.FullName</span>
            </div>
            <!-- <p id="myResult">@ViewBag.Message</p> -->
        </div>

    </div>

    <div class="container-fluid">
        <div class="row">

            <!-- Task Information goes here -->
            <div class="col-sm-4">

                <!-- Task Information Header -->
                <h3>Tasks</h3>

                <!-- Task Table -->
                <div id="projectTableDiv" class="table-responsive">
                    <table id="projectTaskTable" class="table">
                        <thead id="myThead">
                            <tr>
                                <th>Completed Date</th>
                                <th>Tasks</th>
                                <th>Due Date</th>
                            </tr>
                        </thead>
                        @{ Html.RenderAction("TaskView", "Project", new { projectId = Model.Project.ProjectId });}
                    </table>


                    <!-- Tasks Buttons -->
                    <div id="projectTaskButtons">
                        <button hidden type="button" id="projectTaskAdd" class="btn btn-primary" data-target="#projectTaskAddModal" data-toggle="modal">Add</button>
                        <button hidden type="button" id="projectTaskEdit" class="btn btn-primary">Edit</button>
                        <button hidden type="button" id="projectTaskDelete" class="btn btn-danger">Delete</button>

                    </div>

                    @Html.Partial("TaskEditView", Model.Task)
                    @Html.Partial("TaskDetailView", Model.Task)

                    <!-- Note: Project ID, Username from Session. -->
                    <!-- Modal -->
                    <div id="projectTaskAddModal" class="modal fade" role="dialog">
                        <div class="modal-dialog" style="left:0% !important">

                            <!-- Modal content-->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <div class="form-group">
                                        <div class="col-sm-6">
                                            <h4 class="modal-title">Task</h4>
                                        </div>
                                        <div class="col-sm-6">
                                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-body">

                                    <!-- <form id="taskPost" action="/Project/AddTask" method="post"> -->
                                    @using (Html.BeginForm("AddTask", "Project", FormMethod.Post, new { @id = "taskPost" }))
                                    { 
                                    <!-- Errors -->
                                    <div class="form-group row">
                                        <div class="col-sm-12" id="taskErrors1">

                                        </div>
                                    </div>

                                    <hr class="thick" />

                                    <!-- ProjectID -->
                                    <input type="hidden" id="projectId" name="projectId" value="@Model.Project.ProjectId">

                                    <!-- Title -->
                                    <div class="form-group row">
                                        <label for="Title" class="col-sm-2 col-form-label text-left">Title</label>

                                        <input id="taskTitle" name="taskTitle" class="col-sm-10 form-control" type="text" required />

                                    </div>

                                    <!-- Description -->
                                    <div class="form-group row">
                                        <label for="Description" class="col-sm-2 col-form-label text-left">Description</label>

                                        <textarea class="form-control col-sm-10" name="taskDescription" id="taskDescription" rows="3" required></textarea>

                                    </div>


                                    <!-- StartDate & EndDate Inputs -->
                                    <div class="form-group row">
                                        <label for="taskStartDate" class="col-sm-2 col-form-label text-left">Start Date</label>
                                        <input id="taskStartDate" class="col-sm-10 form-control" name="taskStartDate" type="date" required />
                                    </div>
                                    <div class="form-group row">
                                        <label for="EndDate" class="col-sm-2 col-form-label text-left">End Date</label>
                                        <input id="taskEndDate" class="col-sm-10 form-control" name="taskEndDate" type="date" required />

                                    </div>


                                    <!-- Priority -->
                                    <div class="form-group row">
                                        <label for="Priority" class="col-sm-2 col-form-label text-left">Priority</label>
                                        <select class="form-control col-sm-10" id="taskPriority" name="taskPriority" required>
                                            <option>Low</option>
                                            <option>Medium</option>
                                            <option>High</option>
                                        </select>
                                    </div>


                                    <div class="modal-footer">
                                        <!-- Add Button -->
                                        <input id="taskAddBtn" type="submit" class="btn btn-primary" name="Add" value="Add" />
                                        <button type="button" id="taskClose" class="btn btn-danger" data-dismiss="modal">Close</button>
                                    </div>
                                    } <!--form -->

                                </div> <!-- Modal Body Ends here -->

                            </div> <!-- Modal Content Ends here -->
                        </div> <!-- Modal Dialog Ends here -->
                    </div>


                </div> <!-- projectTableDiv ends here -->
            </div> <!-- Task Information ENDS -->
            <!--Document Information goes here -->
            <div class="col-sm-4">

                <!-- Document Header -->
                <h3>Documents</h3>

                <!-- Document Table -->
                <div id="projectTableDiv" class="table-responsive">
                    <table id="projectDocumentTable" class="table">
                        <thead id="myThead">
                            <tr>
                                <th>Document</th>

                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody id="projectDocumentTableTbody" class="projectTableTbody">
                            @{ Html.RenderAction("DocumentView", "Project", new { projectId = Model.Project.ProjectId, roleName = Model.User.Role, uName = Model.User.Username });}
                        </tbody>
                    </table>

                    <div id="projectDocumentButtons">
                        <button type="button" id="projectButtonUpload" class="btn btn-primary">Download</button>
                        <button type="button" id="projectDocumentUpload" class="btn btn-primary" onclick="location.href='@Url.Action("UploadBlob", "Blob", new { projectId = Model.Project.ProjectId, role = Model.User.Role })'">Upload</button>
                        <button type="button" id="projectCompare" class="btn btn-primary">Version Compare</button>
                    </div>
                    @if (Model.User.Role.Equals("Project Manager"))
                    {
                        @Html.Partial("_DocumentDetailPM", Model.document)
                    }
                    else
                    {
                        @Html.Partial("_DocumentDetail", Model.document)
                    }

                </div><!-- projectTableDiv ends here -->
            </div> <!-- Document Information ENDS -->
            <!--Notes Information goes here -->
            <div class="col-sm-4">

                <!-- Note Header -->
                <h3>Notes</h3>

                <!-- Note Table -->
                <div id="projectTableDiv" class="table-responsive">
                    <table id="projectNoteTable" class="table">
                        <thead id="myThead">
                            <tr>
                                <th>Send Date</th>
                                <th>For</th>
                                <th>Message</th>
                            </tr>
                        </thead>
                        <tbody id="projectNoteTableTbody" class="projectTableTbody">
                            @{ Html.RenderAction("NoteView", "Project", new { projectId = Model.Project.ProjectId, roleName = Model.User.Role });}
                        </tbody>
                    </table>

                    <!-- Notes Buttons -->
                    <div id="projectNotesButtons">
                        <button type="button" id="projectNoteAdd" class="btn btn-primary" data-target="#projectNoteAddModal" data-toggle="modal">Add</button>
                        <button type="button" id="projectNotesEdit" class="btn btn-primary">Edit</button>
                        <button type="button" id="projectNoteDelete" class="btn btn-danger">Delete</button>
                    </div>

                    @Html.Partial("ProjectNotesEditView", Model.ProjectNotes)
                    @Html.Partial("ProjectNotesDetailView", Model.ProjectNotes)

                    <!-- Note: Project ID, Username from Session. -->
                    <!-- Modal -->
                    <div id="projectNoteAddModal" class="modal fade" role="dialog">
                        <div class="modal-dialog" style="left:0% !important">

                            <!-- Modal content-->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title">Project Note</h4>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">

                                    @using (Html.BeginForm("AddProjectNote", "Project", new { projectId = Model.Project.ProjectId }, FormMethod.Post, new { @id = "notePost" }))
                                    {
                                        <!-- Errors -->
                                        <div class="form-group row">
                                            <div class="col-sm-12" id="noteErrors1">

                                            </div>
                                        </div>
                                        <hr />

                                        <!-- Message -->
                                        <div class="form-group row">
                                            <label for="Message" class="col-sm-2 col-form-label text-left">Message</label>
                                            <textarea class="col-sm-10 form-control" name="noteMessage" id="noteMessage" rows="3" required></textarea>
                                      
                                        </div>

                                        <!--  Completed Labels
                                        <div class="form-group row">

                                            <label for="CompletedDate" class="col-sm-4 col-form-label text-left">Completed Date</label>

                                            <div class="col-sm-7">
                                                <input id="noteCompletedDate" name="noteCompletedDate" type="date" required />
                                            </div>

                                        </div>
                                            -->

                                        <!-- To -->
                                        <div class="form-group row">
                                            <label for="noteTo" class="col-sm-2 col-form-label text-left">To</label>
                                           
                                                <select class="form-control col-sm-10" id="noteTo" name="noteTo" required>
                                                    @foreach (string role in Model.ProjectNotes.Roles)
                                                    {
                                                        <option>@role</option>
                                                    }
                                                </select>
                                          
                                        </div>


                                        <div class="modal-footer">
                                            <!-- Add Button -->
                                            <input id="submit1" type="submit" class="btn btn-primary" name="Add" value="Add" />
                                            <button type="button" id="taskClose" class="btn btn-danger" data-dismiss="modal">Close</button>

                                        </div>
                                    }
                                    <!--</form>-->

                                </div> <!-- Modal Body Ends here -->

                            </div> <!-- Modal Content Ends here -->
                        </div> <!-- Modal Dialog Ends here -->
                    </div>

                </div><!-- projectTableDiv ends here -->
            </div> <!-- Notes Information ENDS -->
        </div> <!-- Row ends here -->
    </div> <!-- Container-Fluid ends here-->


    <script>
        var documentVersions;
        $(document).ready(function () {


            // jQuery methods go here...

            // Double Click on ProjectTaskTable
            $("#projectTaskTable tbody tr").dblclick(function ()
            {
                $("#taskDetailModal").modal().show();
                myTaskID = $(this).attr('id');
                 $.ajax({
                    type: "POST",
                    url: "@Url.Action("TaskDetail", "Project")", // the method we are calling
                     data:
                         JSON.stringify({ 'myTaskID': myTaskID }),
                     TaskSelectedArray,
                    contentType: 'application/json',
                    success: function (msg) {

                            /// Task Due Date Conversions
                            var taskDueDate = new Date(parseInt(msg.DueDate.substr(6)));

                            var taskDueDateDay = taskDueDate.getDate(taskDueDate);
                            var taskDueDateMonth = taskDueDate.getMonth(taskDueDate) + 1;
                            var taskDueDateYear = taskDueDate.getFullYear(taskDueDate);

                            if (taskDueDateDay < 10) {
                                taskDueDateDay = '0' + taskDueDateDay;
                            }
                            if (taskDueDateMonth < 10) {
                                taskDueDateMonth = '0' + taskDueDateMonth;
                            }
                            var myDueDate = taskDueDateYear + "-" + taskDueDateMonth + "-" + taskDueDateDay;

                            // Task Start Date Conversions
                            var taskStartDate = new Date(parseInt(msg.StartDate.substr(6)));

                            var taskStartDateDay = taskStartDate.getDate(taskStartDate);
                            var taskStartDateMonth = taskStartDate.getMonth(taskStartDate) + 1;
                            var taskStartDateYear = taskStartDate.getFullYear(taskStartDate);

                            if (taskStartDateDay < 10) {
                                taskStartDateDay = '0' + taskStartDateDay;
                            }
                            if (taskStartDateMonth < 10) {
                                taskStartDateMonth = '0' + taskStartDateMonth;
                            }
                            var myStartDate = taskStartDateYear + "-" + taskStartDateMonth + "-" + taskStartDateDay;

                            // Task Completion Date Conversions
                            var taskCompletionDate = new Date(parseInt(msg.CompletedDate.substr(6)));

                            var taskCompletionDateDay = taskCompletionDate.getDate(taskCompletionDate);
                            var taskCompletionDateMonth = taskCompletionDate.getMonth(taskCompletionDate) + 1;
                            var taskCompletionDateYear = taskCompletionDate.getFullYear(taskCompletionDate);

                            if (taskCompletionDateDay < 10) {
                                taskCompletionDateDay = '0' + taskCompletionDateDay;
                            }
                            if (taskCompletionDateMonth < 10) {
                                taskCompletionDateMonth = '0' + taskCompletionDateMonth;
                            }
                            var myCompletionDate = taskCompletionDateYear + "-" + taskCompletionDateMonth + "-" + taskCompletionDateDay;

                            // Task id
                          //  $('input[name="editTaskId"]').val(msg.TaskId);

                            // Task title
                            $('#taskDetailTitle').text(msg.Title);

                            // Task Description
                            $('#taskDetailDescription').text(msg.Description);

                             // Task StartDate
                             $('#taskDetailStartDate').text(myStartDate);

                            // Task DueDate (End Date)
                            $('#taskDetailDueDate').text(myDueDate);

                            // Task CompletionDate
                            $('#taskDetailCompletionDate').text(myCompletionDate);

                             // Task Priority
                             $('#taskPriority').text(msg.Priority);

                            $('#taskDetailModal').modal('show');
                            //EditTaskModal = true;
                    }
                });
            });


            $("#projectNoteTable tbody tr").dblclick(function () {
                $("#projectNotesDetailModal").modal().show();
                myNoteID = $(this).attr('id');
                $.ajax(
                    {
                        type: "POST",
                        url: "@Url.Action("ProjectNotesDetail", "Project")", // the method we are calling
                        data:
                            JSON.stringify({ 'myNoteID': myNoteID }),
                        TaskSelectedArray,
                        contentType: 'application/json',
                        success: function (msg) {

                            // Task Start Date Conversions
                            var taskSentDate = new Date(parseInt(msg.SentDate.substr(6)));

                            var taskSentDateDay = taskSentDate.getDate(taskSentDate);
                            var taskSentDateMonth = taskSentDate.getMonth(taskSentDate) + 1;
                            var taskSentDateYear = taskSentDate.getFullYear(taskSentDate);

                            if (taskSentDateDay < 10) {
                                taskSentDateDay = '0' + taskSentDateDay;
                            }
                            if (taskSentDateMonth < 10) {
                                taskSentDateMonth = '0' + taskSentDateMonth;
                            }
                            var mySentDate = taskSentDateYear + "-" + taskSentDateMonth + "-" + taskSentDateDay;


                            // ProjectNotes Message
                            $('#projectNotesDetailMessage').text(msg.Message);

                            // ProjectNotes SendDate
                            $('#projectNotesDetailSentDate').text(mySentDate);

                            // ProjectNotes From
                            $('#projectNotesDetailFrom').text(msg.From);

                            // ProjectNotes To
                            $('#projectNotesTo').text(msg.To);


                        }
                    });
            });

            //add a event handler if the version is changed on the document popup
            $("#version").change(function () {

                $.each(documentVersions, function (i, val) {
                    if ($("#version option:selected").val() == val.version) {
                        $("#ModifiedBy").text(val.modifiedBy);
                        $("#ModifiedOn").text(val.timeStamp);
                    }
                });
            });

            //download document button click handler
            $("#projectButtonUpload").click(function () {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DownloadLatestVersion", "DocumentReview")',
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    data: '{"id":' + stored + '}',
                    success: downloadBlob,
                    error: function (e) { console.log(e); }
                });
            });

            //download document from popup page
            $("#downloadDoc").click(function () {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("DownloadDocument", "DocumentReview")',
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    data: '{"id":' + $("#DocumentId").val() + ', "ver":' + $("#version option:selected").val() + '}',
                    success: downloadBlob,
                    error: function (e) { console.log(e); }
                });
            });

            //delete document from popup page
            $("#deleteDoc").click(function () {
                $.ajax({
                    type: "POST",
                    url: '', //need to add proper URL
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    data: '{"id":' + $("#DocumentId").val() + ', "ver":' + $("#version option:selected").val() + '}',
                    success: function () { alert("Document Removed"); },
                    error: function (e) { console.log(e); }
                });
            });

            //starts the download
            var downloadBlob = function (data) {
                //var jsonObj = JSON.parse(data);
                var element = document.createElement('a');
                element.setAttribute("href", "data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64," + data.B64);
                element.setAttribute('download', data.FileName);
                document.body.appendChild(element);
                element.click();
                document.body.removeChild(element);
            }

            //handle a double click on the document - displays the popup page
            $("#projectDocumentTable tbody tr").dblclick(function () {
                $("#documentDetailsModal").modal().show();
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetDocumentDetails", "ProjectDocument")',
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    data: '{"id":' + $(this).attr('id') + '}',
                    success: function (data) {
                        console.log(data);
                        $("#DocumentId").val(data.DocumentId);
                        $("#FileName").text(data.FileName);
                        $.each(data.DocVersion.docList, function (i, val) {
                            $("#version").append("<option value=" + val.version + ">" + val.version + "</option>")
                        });
                        $("#ModifiedBy").text(data.DocVersion.docList[0].modifiedBy);
                        $("#ModifiedOn").text(data.DocVersion.docList[0].timeStamp);
                        $("#Uploader").text(data.Uploader);
                        $("#CreationTime").text(data.CreationTime);
                        documentVersions = data.DocVersion.docList;
                    },
                    error: function (e) { console.log(e); }
                });
            });


            // Click on isComplete checkbox
            var disableSelectColor = 0;

            $('#projectTaskTableTbody').on('click', '#isCompleted', function () {
                //myChecked = $('#task').prop("checked");
                disableSelectColor = 1;
            });


            var myChecked;
            var myTaskID;
            var TaskSelectedArray = [];
            // Click on task
            $('#projectTaskTableTbody').on('click', 'tr', function () {
                myTaskID = $(this).attr('id'); // table row ID

                myChecked = $('#task' + myTaskID).prop("checked");


                // Only run if checkedBox is not clicked
                if (disableSelectColor == 0) {
                    $(this).toggleClass('on');
                    //alert("myChecked value is " + myChecked + myTaskID);
                    var exitsVal = false;

                    for (var i = 0; i <= TaskSelectedArray.length; i++) {
                        if (myTaskID == TaskSelectedArray[i]) {
                            TaskSelectedArray.splice(TaskSelectedArray.indexOf(myTaskID), 1);
                            exitsVal = true;
                            //alert("Removed")
                        }
                    }
                    if (exitsVal == false) {
                        TaskSelectedArray.push(myTaskID);
                        //alert("Pushed");
                    }
                }
                else {
                    disableSelectColor = 0;
                    //alert("Passing values " + myChecked + " TaskID " + myTaskID);

                    var data = JSON.stringify({
                        'taskID': myTaskID,
                        'complete': myChecked
                    });

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("isCompleted", "Project")", // the method we are calling
                        data: data,
                        contentType: 'application/json',
                        success: function (msg) {
                            //location.reload();
                        }
                    });
                }
            });



            var ProjectNoteSelectedArray = [];
            // Click on Project Note
            $('#projectNoteTableTbody').on('click', 'tr', function () {
                $(this).toggleClass('on');

                myNoteID = $(this).attr('id'); // table row ID


                var exitsVal = false;

                for (var i = 0; i <= ProjectNoteSelectedArray.length; i++) {
                    if (myNoteID == ProjectNoteSelectedArray[i]) {
                        ProjectNoteSelectedArray.splice(ProjectNoteSelectedArray.indexOf(myNoteID), 1);
                        exitsVal = true;
                        //alert("Removed")
                    }
                }
                if (exitsVal == false) {
                    ProjectNoteSelectedArray.push(myNoteID);
                    //alert("Pushed");
                }
            });


            mnew = 0;
            stored = 0;
            fileExtension = "Empty";
            //Click on Project Document
            $('#projectDocumentTableTbody').on('click', 'tr', function () {
                myDocumentID = $(this).attr('id'); // table row ID

                myFileExtension = $(this).find("#fileExtension").text();



                if (myDocumentID == stored || mnew == 0) {
                    //alert("myDocumentID " + myDocumentID + " Stored: " + stored + " mnew : " + mnew);
                    $(this).toggleClass('on');

                    mnew = -1;
                    stored = myDocumentID;
                    fileExtension = myFileExtension;
                    if ($(this).hasClass('on') == false) {
                        //  alert("RESET");
                        mnew = 0;
                        stored = 0;
                        fileExtension = "Empty";
                    }
                }
                //alert("NOTE: myDocumentID " + myDocumentID + " Stored: " + stored + " mnew : " + mnew + " fileEX " + fileExtension);
            });

            // Clicking compare button
            $('#projectCompare').click(function () {

                if (fileExtension == "empty" || stored == 0 || fileExtension == null) {

                    // alert("Sorry, file Extension is ");
                    // alert("fileEx" + fileExtension);


                }
                else if ($.trim(String(fileExtension)) == ".docx" || $.trim(String(fileExtension)) == ".doc") {
                    // alert("File " + fileExtension);
                    var url = '/DocumentReview/Index/' + stored;
                    window.location = url;
                }
                else {
                    alert("File must be doc or docx!");
                }

            })

            // Deleting Task
            $('#projectTaskDelete').click(function () {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteTask", "Project")", // the method we are calling
                    data:
                        JSON.stringify({ 'TaskSelectedArray': TaskSelectedArray }),
                    TaskSelectedArray,
                    contentType: 'application/json',
                    success: function (msg) {
                        location.reload();
                    }
                });
            });

            // Editing Task Modal Button
            $('#taskEditBtn').click(function () {
                //alert("EndDate: " + endDateValP + "StartDateP: " + startDateValP + "titleValP: " + titleValP + "descriptionValP: " + descriptionValP + "CompletionValP: " + completionValP);
                if (EditTaskModal == true && endDateValP == true && startDateValP == true && titleValP == true && descriptionValP == true && completionValP) {
                    editTaskId = $('#editTaskId').val();
                    editTaskTitle = $('#editTaskTitle').val();
                    editTaskDescription = $('#editTaskDescription').val();
                    editTaskStartDate = $('#editTaskStartDate').val();
                    editTaskEndDate = $('#editTaskEndDate').val();
                    editTaskCompletionDate = $('#editTaskCompletionDate').val();
                    editTaskPriority = $('#editTaskPriority').val();

                    var editTaskArray = [editTaskId, editTaskTitle, editTaskDescription, editTaskStartDate, editTaskEndDate, editTaskCompletionDate, editTaskPriority];

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("EditTask", "Project")", // the method we are calling
                        data:
                            JSON.stringify({ 'editTaskArray': editTaskArray }),
                        TaskSelectedArray,
                        contentType: 'application/json',
                        success: function (msg) {
                            location.reload();
                        }
                    });
                }
            });

            var EditTaskModal = true;
            // Editing Task /////////////////////////////////////////////////////
            $('#projectTaskEdit').click(function () {
                if (TaskSelectedArray.length < 2) {


                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("TaskEditView", "Project")", // the method we are calling
                        data:
                            JSON.stringify({ 'TaskSelectedArray': TaskSelectedArray }),
                        TaskSelectedArray,
                        contentType: 'application/json',
                        success: function (msg) {

                            try {
                                /// Task Due Date Conversions
                                var taskDueDate = new Date(parseInt(msg.DueDate.substr(6)));

                                var taskDueDateDay = taskDueDate.getDate(taskDueDate);
                                var taskDueDateMonth = taskDueDate.getMonth(taskDueDate) + 1;
                                var taskDueDateYear = taskDueDate.getFullYear(taskDueDate);

                                if (taskDueDateDay < 10) {
                                    taskDueDateDay = '0' + taskDueDateDay;
                                }
                                if (taskDueDateMonth < 10) {
                                    taskDueDateMonth = '0' + taskDueDateMonth;
                                }
                                var myDueDate = taskDueDateYear + "-" + taskDueDateMonth + "-" + taskDueDateDay;

                                // Task Start Date Conversions
                                var taskStartDate = new Date(parseInt(msg.StartDate.substr(6)));

                                var taskStartDateDay = taskStartDate.getDate(taskStartDate);
                                var taskStartDateMonth = taskStartDate.getMonth(taskStartDate) + 1;
                                var taskStartDateYear = taskStartDate.getFullYear(taskStartDate);

                                if (taskStartDateDay < 10) {
                                    taskStartDateDay = '0' + taskStartDateDay;
                                }
                                if (taskStartDateMonth < 10) {
                                    taskStartDateMonth = '0' + taskStartDateMonth;
                                }
                                var myStartDate = taskStartDateYear + "-" + taskStartDateMonth + "-" + taskStartDateDay;

                                // Task Completion Date Conversions
                                var taskCompletionDate = new Date(parseInt(msg.CompletedDate.substr(6)));

                                var taskCompletionDateDay = taskCompletionDate.getDate(taskCompletionDate);
                                var taskCompletionDateMonth = taskCompletionDate.getMonth(taskCompletionDate) + 1;
                                var taskCompletionDateYear = taskCompletionDate.getFullYear(taskCompletionDate);

                                if (taskCompletionDateDay < 10) {
                                    taskCompletionDateDay = '0' + taskCompletionDateDay;
                                }
                                if (taskCompletionDateMonth < 10) {
                                    taskCompletionDateMonth = '0' + taskCompletionDateMonth;
                                }
                                var myCompletionDate = taskCompletionDateYear + "-" + taskCompletionDateMonth + "-" + taskCompletionDateDay;



                                // Task id
                                $('input[name="editTaskId"]').val(msg.TaskId);

                                // Task title
                                $('input[name="editTaskTitle"]').val(msg.Title);
                                $('input[name="editTaskTitle"]').attr("placeholder", msg.Title);

                                // Task Description
                                $('textarea[name="editTaskDescription"]').val(msg.Description);
                                $('textarea[name="editTaskDescription"]').attr("placeholder", msg.Description);

                                // Task StartDate
                                $('input[name="editTaskStartDate"]').val(myStartDate);

                                // Task DueDate (End Date)
                                $('input[name="editTaskEndDate"]').val(myDueDate);

                                // Task CompletionDate
                                $('input[name="editTaskCompletionDate"]').val(myCompletionDate);

                                // Task Priority
                                $('select[name="editTaskPriority"]').val(msg.Priority);

                                $('#projectTaskEditModal').modal('show');
                                EditTaskModal = true;

                                // Checks if value already is pre-populated
                                var tempTitle = $('#editTaskTitle').val();
                                if (!$.trim(tempTitle).length == 0) {
                                    titleValP = true;
                                }

                                var tempDescription = $('#editTaskDescription').val();
                                if (!$.trim(tempDescription).length == 0) {
                                    descriptionValP = true;
                                }

                                var tempStartDate = $('#editTaskStartDate').val();
                                if (!$.trim(tempStartDate).length == 0) {
                                    startDateValP = true;
                                }

                                var tempEndDate = $('#editTaskEndDate').val();
                                if (!$.trim(tempEndDate).length == 0) {
                                    endDateValP = true;
                                }

                                var tempCompletionDate = $('#editTaskCompletionDate').val();
                                if (!$.trim(tempCompletionDate).length == 0) {
                                    completionValP = true;
                                }

                            }
                            catch (Exception)
                            {

                            }
                        }
                    });
                }
                else {
                    alert("Select only one Task to edit")

                    $('#projectTaskEditModal').modal('hide');
                    EditTaskModal = false;
                }
            });


            // Deleting Project Note
            $('#projectNoteDelete').click(function () {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteProjectNote", "Project")", // the method we are calling
                    data:
                        JSON.stringify({ 'ProjectNoteSelectedArray': ProjectNoteSelectedArray }),
                    contentType: 'application/json',
                    success: function (msg) {
                        location.reload();
                    }
                });
            });


             /////////////////////////////////// Editing Project Notes Modal Button
            $('#ProjectNotesEditBtn').click(function () {
                if (EditProjectNotesModal == true && messageValP == true) {
                    editProjectNotesId = $('#editProjectNotesId').val();
                    editProjectNotesMessage = $('#editProjectNotesMessage').val();
                    editProjectNotesCompletionDate = $('#editProjectNotesCompletionDate').val();
                    editProjectNotesTo = $('#editProjectNotesTo').val();

                    var editProjectNotesArray = [editProjectNotesId, editProjectNotesMessage, editProjectNotesCompletionDate, editProjectNotesTo];

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("EditProjectNotes", "Project")", // the method we are calling
                        data:
                            JSON.stringify({ 'editProjectNotesArray': editProjectNotesArray }),
                        ProjectNoteSelectedArray,
                        contentType: 'application/json',
                        success: function (msg) {
                            location.reload();
                        }
                    });
                }
            });

            var EditProjectNotesModal = true;
             // Editing Project Notes  ///////////////////////////////////////////////////////////////////////////////////////
            $('#projectNotesEdit').click(function ()
            {
                if (ProjectNoteSelectedArray.length < 2)
                {
                    if (ProjectNoteSelectedArray.length == 1) {
                        try {
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("ProjectNotesEditView", "Project")", // the method we are calling
                                data:
                                    JSON.stringify({ 'ProjectNoteSelectedArray': ProjectNoteSelectedArray }),
                                TaskSelectedArray,
                                contentType: 'application/json',
                                success: function (msg) {
                                    $('#projectNotesEditModal').modal('show');
                                    try {

                                        // Project Notes  Completion Date Conversions
                                        /*
                                        var projectNotesCompletedDate = new Date(parseInt(msg.CompletedDate.substr(6)));

                                        var projectNotesCompletedDateDay = projectNotesCompletedDate.getDate(projectNotesCompletedDate);
                                        var projectNotesCompletedDateMonth = projectNotesCompletedDate.getMonth(projectNotesCompletedDate) + 1;
                                        var projectNotesCompletedDateYear = projectNotesCompletedDate.getFullYear(projectNotesCompletedDate);

                                        if (projectNotesCompletedDateYear == null) {
                                            projectNotesCompletedDateYear = '00000' + projectNotesCompletedDateYear;
                                        }
                                        if (projectNotesCompletedDateDay < 10) {
                                            projectNotesCompletedDateDay = '0' + projectNotesCompletedDateDay;
                                        }
                                        if (projectNotesCompletedDateMonth < 10) {
                                            projectNotesCompletedDateMonth = '0' + projectNotesCompletedDateMonth;
                                        }
                                        var myCompletionDateProject = projectNotesCompletedDateYear + "-" + projectNotesCompletedDateMonth + "-" + projectNotesCompletedDateDay;
                                        */

                                        // Project Note Message
                                        $('textarea[name="editProjectNotesMessage"]').val(msg.Message);
                                        $('textarea[name="editProjectNotesMessage"]').attr("placeholder", msg.Message);


                                        // ProjectNotes ID
                                        $('input[name="editProjectNotesId"]').val(msg.ProjectNoteId);


                                        // ProjectNotes CompletionDate
                                        //$('input[name="editProjectNotesCompletionDate"]').val(myCompletionDateProject);

                                        // ProjectNotes To
                                        $('select[name="editProjectNotesTo"]').val(msg.To);



                                        EditProjectNotesModal = true;
                                        var tempMessageP = $('#editProjectNotesMessage').val();

                                        if (!$.trim(tempMessageP).length == 0) {

                                            messageValP = true;


                                        }
                                    }
                                    catch (Exception) {

                                    }
                                }
                            });
                        }
                        catch (e) {

                        }
                    }
                    else {
                        alert("You must select a task to edit");
                    }
                }
                else {
                    alert("Select only one Project to edit")
                    $('#projectNotesEditModal').modal('hide');
                    EditProjectNotesModal = false;
                }
            });






            // Task Add - Title, Description, StartDate, EndDate)
            var endDateVal = false;
            var startDateVal = false;
            var titleVal = false;
            var descriptionVal = false;

            // Task Edit

            var endDateValP = false;
            var startDateValP = false;

            var titleValP = false;
            var descriptionValP = false;
            var completionValP = false;

            $("#taskPost").on('submit', function (e) {

                if (endDateVal == false || startDateVal == false || titleVal == false || descriptionVal == false) {
                   
                   e.preventDefault();
                }


            });


            // Title VALIDATION for Task Edit
            $('#editTaskTitle').focusout(function () {
                var myTaskTitle = $('#editTaskTitle').val();
                if (/\d/.test(myTaskTitle)) {
                    // number found
                    $('#taskEditErrors').text("Title cannot have numbers, try agian.");
                    titleValP = false;
                }
                else if (myTaskTitle.length > 40) {
                    $('#taskEditErrors').text("Title must be smaller, try agian.");
                    titleValP = false;
                }
                else if ($.trim(myTaskTitle).length == 0) {
                    $('#taskEditErrors').text("You have not entered a title.");
                    titleValP = false;
                }
                else {
                    $('#taskEditErrors').empty();
                    titleValP = true;

                }
            });

           
            // Title VALIDATION
            $('#taskTitle').focusout(function () {
                var myTaskTitle = $('#taskTitle').val();
                 
                 
                if (/\d/.test(myTaskTitle)) {
                    // number found
                    $('#taskErrors1').html("Title cannot have numbers, try agian.");
                    
                    
                    titleVal = false;
                }
                else if (myTaskTitle.length > 40)
                {
                    $('#taskErrors1').text("Title must be smaller, try agian.");
                    titleVal = false;
                }
                else if ($.trim(myTaskTitle).length == false)
                {
                    $('#taskErrors1').text("You have not entered a title.");
                  
                    titleVal = false;
                }
                else {
                    $('#taskErrors1').empty();
                    titleVal = true;

                }
            });

            // Description VALIDATION for Tasks Edit
            $('#editTaskDescription').focusout(function () {
                var myTaskDescription = $('#editTaskDescription').val();

                if (myTaskDescription.length > 255) {
                    $('#taskEditErrors').text("Description must be smaller, try agian.");

                    descriptionValP = false;
                }
                else if ($.trim(myTaskDescription).length == 0) {
                    $('#taskEditErrors').text("Please enter a Description.");

                    descriptionValP = false;
                }
                else {
                    $('#taskEditErrors').empty();

                    descriptionValP = true;

                }
            });

            // Description VALIDATION
            $('#taskDescription').focusout(function () {
                var myTaskDescription = $('#taskDescription').val();

                if (myTaskDescription.length > 255) {
                    $('#taskErrors1').text("Description must be smaller, try agian.");

                    descriptionVal = false;
                }
                else if ($.trim(myTaskDescription).length == 0) {
                    $('#taskErrors1').text("Please enter a Description.");

                    descriptionVal = false;
                }
                else {
                    $('#taskErrors1').empty();

                    descriptionVal = true;

                }
            });

            // EndDate VALIDATION for Task Edit
            $('#editTaskEndDate').focusout(function () {
                var myEndDate = new Date($(this).val());
                var myStartDate = new Date($('#editTaskStartDate').val());
                var currentdateTime = new Date($.now());
                if (myEndDate < myStartDate) {
                    // alert("Your End Date, ends before your Start Date.");
                    $('#taskEditErrors').text("Your End Date, ends before your Start Date.");
                    endDateValP = false;
                }
                else if (currentdateTime == myEndDate) {
                    $('#taskEditErrors').text("Your End Date, must end after today.");
                    endDateValP = false;
                }
                else {
                    $('#taskEditErrors').empty();
                    endDateValP = true;
                }
            });

            // EndDate VALIDATION
            $('#taskEndDate').focusout(function () {
                var myEndDate = new Date($(this).val());
                var myStartDate = new Date($('#taskStartDate').val());
                var currentdateTime = new Date($.now());
                if (myEndDate < myStartDate) {
                   // alert("Your End Date, ends before your Start Date.");
                    $('#taskErrors1').text("Your end date, finishs before your start date.");
                    endDateVal = false;
                }
                else if (currentdateTime == myEndDate)
                {
                    $('#taskErrors1').text("Your End Date, must end after today.");
                    endDateVal = false;
                }
                else
                {
                    $('#taskErrors1').empty();
                    endDateVal = true;
                }

            });

            // StartDate VALIDATION For Edit Task
            $('#editTaskStartDate').focusout(function () {
                var myStartDate = new Date($(this).val());
                var myEndDate = new Date($('#editTaskEndDate').val());
                if (myEndDate < myStartDate) {
                    //alert("Your Start Date, ends before your End Date.");
                    $('#taskEditErrors').text("Your Start Date, ends before your End Date");
                    startDateValP = false;
                }
                else {
                    $('#taskEditErrors').empty();
                    startDateValP = true;
                }

            });

            // StartDate VALIDATION
            $('#taskStartDate').focusout(function () {
                var myStartDate = new Date($(this).val());
                var myEndDate = new Date($('#taskEndDate').val());
                if (myEndDate < myStartDate) {
                    //alert("Your Start Date, ends before your End Date.");
                    $('#taskErrors1').text("Your Start Date, ends before your End Date");
                    startDateVal = false;
                }
                else {
                    $('#taskErrors1').empty();
                    startDateVal = true;
                }

            });

            // Message, CompletionDate) //// EDIT HERE !!!!!!!!!!!!!!!!!!!!!!!!!!!!
            var messageVal = false;
            var messageValP = false;
            $("#ProjectNotesEditBtn").click(function (e) {

                var tempMessageP = $('#editProjectNotesMessage').val();

                if (!$.trim(tempMessageP).length == 0) {

                    messageValP = true;


                }

                if (messageValP == false) {
                    e.preventDefault();
                }

            });

            $("#notePost").on('submit', function (e) {


                if (messageVal == false) {
                   e.preventDefault();
                }



            });

            // Message VALIDATION
            $('#noteMessage').focusout(function () {
                var myNoteMessage = $('#noteMessage').val();

                if (myNoteMessage.length > 255) {
                    $('#noteErrors1').text("Note Message must be smaller, try agian.");

                    messageVal = false;
                }
                else if ($.trim(myNoteMessage).length == 0) {
                    $('#noteErrors1').text("Please enter a message.");

                    messageVal = false;
                }
                else {
                    $('#noteErrors1').empty();

                    messageVal = true;

                }
            });


            // Message VALIDATION FOR ProjectNotes Edit
            $('#editProjectNotesMessage').focusout(function () {
                var myNoteMessage = $('#editProjectNotesMessage').val();

                if (myNoteMessage.length > 255) {
                    $('#projectNotesErrors').text("Note Message must be smaller, try agian.");

                    messageValP = false;
                }
                else if ($.trim(myNoteMessage).length == 0) {
                    $('#projectNotesErrors').text("Please enter a message.");

                    messageValP = false;
                }
                else {
                    $('#projectNotesErrors').empty();

                    messageValP = true;

                }

                //alert("Console Write" + messageValP);
            });


            $('#editTaskCompletionDate').focusout(function () {
                var myTaskCompletedDate = new Date($('#editTaskCompletionDate').val());
                var currentdateTime = new Date($.now());
                if (currentdateTime > myTaskCompletedDate) {
                    $('#taskEditErrors').text("Enter a completion date after today.");
                    completionValP = false;
                }
                else {
                    $('#taskEditErrors').empty();
                    completionValP = true;
                }

            });



           /*
            // CompletionDate VALIDATION
            $('#noteCompletedDate').focusout(function () {
                var myNoteCompletedDate = new Date($('#noteCompletedDate').val());
                var currentdateTime = new Date($.now());
                if (currentdateTime > myNoteCompletedDate) {
                    $('#noteErrors').text("Enter a completion date after today.");
                    completionVal = false;
                }
                else {
                    $('#noteErrors').empty();
                    completionVal = true;
                }

            });
            */




            if ("@Model.User.Role" == "Project Manager") {
                $('#TeamManagement').removeClass('hidden');
                $('#ProjectTaskDelete').removeClass('hidden');
                $('#ProjectTaskAdd').removeClass('hidden');
                $('#ProjectTaskEdit').removeClass('hidden');
            }

        });

    </script>



</body>
</html>
