@using WhiteBears.Models
@model ProjectPageViewModel
@{
    
    Layout = null;
}

<!DOCTYPE html>

<html>

<head>
    <meta name="viewport" content="width=device-width" />

    @Styles.Render("~/bundles/style/projectpage")    
</head>

<body>

    <div class="container-fluid">

        <div id="row" class="row">
            <div id="topBar" class="col-sm-6">
              <h1 id="topBarTitle">@Model.Project.Title   </h1> 
            </div>
            <div class="col-sm-6">
                <button hidden type="button" id="TeamManagement" class="btn btn-info hidden" onclick="location.href='@Url.Action("Index", "TeamManagement", new { projectId = Model.Project.ProjectId})'">Team Management</button>
            </div>
        </div>
        <hr id="hr" />
        <div id="row" class="row">
            <span id="projectId" hidden>@Model.Project.ProjectId</span>
            <div id="backButton" class="col-sm-6">
                <span> @Html.ActionLink("Back to Dashboard", "Index", "Dashboard")</span>
            </div>
            <div id="nameDiv" class="col-sm-6">
                <span id="name">@Model.User.FullName</span>
            </div>
            <!-- <p id="myResult">@ViewBag.Message</p> -->
        </div>

    </div>

    <div class="container-fluid">
        <div class="row">

            <!-- Task Information goes here -->
            <div class="col-sm-4">

                <!-- Task Information Header -->
                <h3>Tasks</h3>

                <!-- Task Table -->
                <div id="projectTableDiv" class="table-responsive">
                    <table id="projectTaskTable" class="table">
                        <thead id="myThead">
                            <tr>
                                <th>Completed Date</th>
                                <th>Tasks</th>
                                <th>Due Date</th>
                            </tr>
                        </thead>
                            @{ Html.RenderAction("TaskView", "Project", new { projectId = Model.Project.ProjectId});}
                    </table>


                    <!-- Tasks Buttons -->
                    <div id="projectTaskButtons">
                        <button type="button" id="projectTaskAdd" class="btn btn-info" data-target="#projectTaskAddModal" data-toggle="modal">Add</button>
                        <button type="button" id="projectTaskDelete" class="btn btn-danger">Delete</button>

                    </div>

                    <!-- Note: Project ID, Username from Session. -->
                    <!-- Modal -->
                    <div id="projectTaskAddModal" class="modal fade" role="dialog">
                        <div class="modal-dialog" style="left:0% !important">
                         
                            <!-- Modal content-->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title">Task</h4>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">

                                    <form id="taskPost" action="/Project/AddTask" method="post">

                                        <!-- Errors -->
                                        <div class="form-group row">
                                            <div class="col-sm-12" id="taskErrors">

                                            </div>
                                        </div>
                                        <hr />

                                        <!-- ProjectID -->
                                        <input type="hidden" id="projectId" name="projectId" value="@Model.Project.ProjectId">

                                        <!-- Title -->
                                        <div class="form-group row">
                                            <label for="Title" class="col-sm-4 col-form-label">Title:</label>
                                            <div class="col-sm-6">
                                                <input id="taskTitle" name="taskTitle" class="form-control" type="text" required />
                                            </div>
                                        </div>

                                        <!-- Description -->
                                        <div class="form-group row">
                                            <label for="Description" class="col-sm-4 col-form-label">Description:</label>
                                            <div class="col-sm-6">
                                                <textarea class="form-control" name="taskDescription" id="taskDescription" rows="3" required></textarea>
                                            </div>
                                        </div>

                                        <!-- StartDate & EndDate Labels -->
                                        <div class="form-group row">
                                            <label for="StartDate" class="col-sm-6 col-form-label text-center">Start Date</label>
                                            <label for="EndDate" class="col-sm-6 col-form-label text-center">End Date</label>

                                        </div>

                                        <!-- StartDate & EndDate Inputs -->
                                        <div class="form-group row">
                                            <div class="col-sm-6 text-center">
                                                <input id="taskStartDate" name="taskStartDate" type="date" required />
                                            </div>
                                            <div class="col-sm-6 text-center">
                                                <input id="taskEndDate" name="taskEndDate" type="date" required />
                                            </div>
                                        </div>

                                        <!-- CompletionDate Label -->
                                        <div class="form-group row">
                                            <label for="CompletionDate" class="col-sm-12 col-form-label text-center">Completion Date</label>
                                        </div>

                                        <!-- Priority -->
                                        <div class="form-group row">
                                            <label for="Priority" class="col-sm-3 col-form-label text-center">Priority</label>
                                            <select class="form-control" id="taskPriority" name="taskPriority" required>
                                                <option>Low</option>
                                                <option>Medium</option>
                                                <option>High</option>
                                            </select>
                                        </div>


                                        <div class="modal-footer">
                                            <!-- Add Button -->
                                            <input id="taskAddbtn" type="submit" class="btn btn-default" name="Add" value="Add" />
                                        </div>
                                    </form>

                                </div> <!-- Modal Body Ends here -->

                            </div> <!-- Modal Content Ends here -->
                        </div> <!-- Modal Dialog Ends here -->
                    </div>


                </div> <!-- projectTableDiv ends here -->
            </div> <!-- Task Information ENDS -->

            <!--Document Information goes here -->
            <div class="col-sm-4">

                <!-- Document Header -->
                <h3>Documents</h3>

                <!-- Document Table -->
                <div id="projectTableDiv">
                    <table id="projectDocumentTable" class="table">
                        <thead id="myThead">
                            <tr>
                                <th>Document</th>
                                <th>Access</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody id="projectDocumentTableTbody" class="projectTableTbody">
                            @{ Html.RenderAction("DocumentView", "Project", new { projectId = Model.Project.ProjectId, roleName = Model.User.Role, uName = Model.User.Username});}
                        </tbody>
                    </table>

                    <div id="projectDocumentButtons">
                        <button type="button" id="projectDocumentUpload" class="btn btn-info" onclick="location.href='@Url.Action("UploadBlob", "Blob", new { projectId = Model.Project.ProjectId, role = Model.User.Role})'">Upload</button>
                        <button type="button" id="projectCompare" class="btn btn-info">Version Compare</button>
                    </div>

                </div><!-- projectTableDiv ends here -->
            </div> <!-- Document Information ENDS -->
            <!--Notes Information goes here -->
            <div class="col-sm-4">

                <!-- Note Header -->
                <h3>Notes</h3>

                <!-- Note Table -->
                <div id="projectTableDiv">
                    <table id="projectNoteTable" class="table">
                        <thead id="myThead">
                            <tr>
                                <th>Send Date</th>
                                <th>For</th>
                                <th>Message</th>
                            </tr>
                        </thead>
                        <tbody id="projectNoteTableTbody" class="projectTableTbody">
                            @{ Html.RenderAction("NoteView", "Project", new { projectId = Model.Project.ProjectId, roleName = Model.User.Role });}
                        </tbody>
                    </table>

                    <!-- Notes Buttons -->
                    <div id="projectNotesButtons">
                        <button type="button" id="projectNoteAdd" class="btn btn-info" data-target="#projectNoteAddModal" data-toggle="modal">Add</button>
                        <button type="button" id="projectNoteDelete" class="btn btn-danger">Delete</button>
                    </div>

                    <!-- Note: Project ID, Username from Session. -->
                    <!-- Modal -->
                    <div id="projectNoteAddModal" class="modal fade" role="dialog">
                        <div class="modal-dialog" style="left:0% !important">

                            <!-- Modal content-->
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h4 class="modal-title">Project Note</h4>
                                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                                </div>
                                <div class="modal-body">

                                    @using (Html.BeginForm("AddProjectNote", "Project", new { projectId = Model.Project.ProjectId },FormMethod.Post, new { @id = "notePost"}))
                                    {
                                        <!-- Errors -->
                                        <div class="form-group row">
                                            <div class="col-sm-12" id="noteErrors">

                                            </div>
                                        </div>
                                        <hr />

                                        <!-- Message -->
                                        <div class="form-group row">
                                            <label for="Message" class="col-sm-2 col-form-label">Message:</label>
                                            <div class="col-sm-8">
                                                <textarea class="form-control" name="noteMessage" id="noteMessage" rows="3" required></textarea>
                                            </div>
                                        </div>

                                        <!--  Completed Labels -->
                                        <div class="form-group row">
                                           
                                            <label for="CompletedDate" class="col-sm-12 col-form-label text-center">Completed Date</label>

                                        </div>

                                        <!-- EndDate Inputs -->
                                        <div class="form-group row">
                                            
                                            <div class="col-sm-12 text-center">
                                                <input id="noteCompletedDate" name="noteCompletedDate" type="date" required />
                                            </div>
                                        </div>

                                        <!-- To -->
                                        <div class="form-group row">
                                            <label for="noteTo" class="col-sm-2 col-form-label text-center">To:</label>
                                            <select class="form-control" id="noteTo" name="noteTo" required>
                                                <option>Developer</option>
                                                <option>Project Manager</option>
                                                <option>Full Stack Developer</option>
                                                <option>Business Analyst</option>
                                                <option>Contractor</option>
                                                <option>Admin</option>
                                            </select>
                                        </div>


                                        <div class="modal-footer">
                                            <!-- Add Button -->
                                            <input id="submit1" type="submit" class="btn btn-default" name="Add" value="Add" />

                                        </div>
                                    }
                                    <!--</form>-->

                                </div> <!-- Modal Body Ends here -->

                            </div> <!-- Modal Content Ends here -->
                        </div> <!-- Modal Dialog Ends here -->
                    </div>



                </div><!-- projectTableDiv ends here -->
            </div> <!-- Notes Information ENDS -->
        </div> <!-- Row ends here -->
    </div> <!-- Container-Fluid ends here-->


    <script>

        $(document).ready(function () {
           
            // jQuery methods go here...

            // Double Click on ProjectTaskTable
            $("#projectTaskTable tbody tr").dblclick(function () {
                alert("More things will go here...");
            });

            $("#projectDocumentTable tbody tr").dblclick(function () {
                alert("More things will go here");
            });


            // Click on isComplete checkbox
            var disableSelectColor = 0;

            $('#projectTaskTableTbody').on('click', '#isCompleted', function () {
                //myChecked = $('#task').prop("checked");
                disableSelectColor = 1;
            });


            var myChecked;
            var myTaskID;
            var TaskSelectedArray = [];
            // Click on task 
            $('#projectTaskTableTbody').on('click', 'tr', function () {
                myTaskID = $(this).attr('id'); // table row ID 

                myChecked = $('#task' + myTaskID).prop("checked");


                // Only run if checkedBox is not clicked
                if (disableSelectColor == 0) {
                    $(this).toggleClass('on');
                    //alert("myChecked value is " + myChecked + myTaskID);
                    var exitsVal = false;

                    for (var i = 0; i <= TaskSelectedArray.length; i++) {
                        if (myTaskID == TaskSelectedArray[i]) {
                            TaskSelectedArray.splice(TaskSelectedArray.indexOf(myTaskID), 1);
                            exitsVal = true;
                            //alert("Removed")
                        }
                    }
                    if (exitsVal == false) {
                        TaskSelectedArray.push(myTaskID);
                        //alert("Pushed");
                    }
                }
                else {
                    disableSelectColor = 0;
                    //alert("Passing values " + myChecked + " TaskID " + myTaskID);

                    var data = JSON.stringify({
                        'taskID': myTaskID,
                        'complete': myChecked
                    });

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("isCompleted", "Project")", // the method we are calling
                        data: data,
                        contentType: 'application/json',
                        success: function (msg) {
                            //location.reload();
                        }
                    });
                }
            });



            var ProjectNoteSelectedArray = [];
            // Click on Project Note 
            $('#projectNoteTableTbody').on('click', 'tr', function () {
                $(this).toggleClass('on');

                myNoteID = $(this).attr('id'); // table row ID 


                var exitsVal = false;

                for (var i = 0; i <= ProjectNoteSelectedArray.length; i++) {
                    if (myNoteID == ProjectNoteSelectedArray[i]) {
                        ProjectNoteSelectedArray.splice(ProjectNoteSelectedArray.indexOf(myNoteID), 1);
                        exitsVal = true;
                        //alert("Removed")
                    }
                }
                if (exitsVal == false) {
                    ProjectNoteSelectedArray.push(myNoteID);
                    //alert("Pushed");
                }
            });


            mnew = 0;
            stored = 0;
            fileExtension = "Empty";
            //Click on Project Document
            $('#projectDocumentTableTbody').on('click', 'tr', function () {
                myDocumentID = $(this).attr('id'); // table row ID 

                myFileExtension = $(this).find("#fileExtension").text();



                if (myDocumentID == stored || mnew == 0) {
                    //alert("myDocumentID " + myDocumentID + " Stored: " + stored + " mnew : " + mnew);
                    $(this).toggleClass('on');

                    mnew = -1;
                    stored = myDocumentID;
                    fileExtension = myFileExtension;
                    if ($(this).hasClass('on') == false) {
                      //  alert("RESET");
                        mnew = 0;
                        stored = 0;
                        fileExtension = "Empty";
                    }
                }
                //alert("NOTE: myDocumentID " + myDocumentID + " Stored: " + stored + " mnew : " + mnew + " fileEX " + fileExtension);
            });

            // Clicking compare button
            $('#projectCompare').click(function () {

                if (fileExtension == "empty" || stored == 0 || fileExtension == null) {

                   // alert("Sorry, file Extension is ");
                   // alert("fileEx" + fileExtension);


                }
                else if ($.trim(String(fileExtension)) == ".docx" || $.trim(String(fileExtension)) == ".doc") {
                   // alert("File " + fileExtension);
                    var url = '/DocumentReview/Index/' + stored;
                    window.location = url;
                }
                else {
                    alert("File must be doc or docx!");
                }

            })

            // Deleting Task
            $('#projectTaskDelete').click(function () {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteTask", "Project")", // the method we are calling
                    data:
                        JSON.stringify({ 'TaskSelectedArray': TaskSelectedArray }),
                    TaskSelectedArray,
                    contentType: 'application/json',
                    success: function (msg) {
                        location.reload();
                    }
                });
            });

            // Deleting Project Note
            $('#projectNoteDelete').click(function () {

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteProjectNote", "Project")", // the method we are calling
                    data:
                        JSON.stringify({ 'ProjectNoteSelectedArray': ProjectNoteSelectedArray }),
                    contentType: 'application/json',
                    success: function (msg) {
                        location.reload();
                    }

                });
            });


            // Incomplete dynamic role 
            $('#projectNoteAdd').click(function () {
                $.ajax({
                    url: "@Url.Action("getRoles", "Project")",
                    type: 'POST',
                    dataType: 'json',
                    data: { id: 'value' },
                    success: function (data) {
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            // Title - Description, StartDate, EndDate)
            var endDateVal = false;
            var startDateVal = false;
            var titleVal = false; 
            var descriptionVal = false; 

            $("#taskPost").on('submit', function (e) {


                if (endDateVal == false || startDateVal == false || titleVal == false || descriptionVal == false) {
                    e.preventDefault();
                }

            });

            // Title VALIDATION
            $('#taskTitle').focusout(function () {
                var myTaskTitle = $('#taskTitle').val();
                if (/\d/.test(myTaskTitle)) {
                    // number found
                    $('#taskErrors').text("Title cannot have numbers, try agian.");
                    titleVal = false; 
                }
                else if (myTaskTitle.length > 40)
                {
                    $('#taskErrors').text("Title must be smaller, try agian.");
                    titleVal = false; 
                }
                else if ($.trim(myTaskTitle).length == 0)
                {
                    $('#taskErrors').text("You have not entered a title.");
                    titleVal = false; 
                }
                else {
                    $('#taskErrors').empty();
                    titleVal = true; 
                    
                }
            });

            // Description VALIDATION
            $('#taskDescription').focusout(function () {
                var myTaskDescription = $('#taskDescription').val();
               
                if (myTaskDescription.length > 255) {
                    $('#taskErrors').text("Description must be smaller, try agian.");
              
                    descriptionVal = false;
                }
                else if ($.trim(myTaskDescription).length == 0) {
                    $('#taskErrors').text("Please enter a Description.");
                  
                    descriptionVal = false;
                }
                else {
                    $('#taskErrors').empty();
                 
                    descriptionVal = true;

                }
            });


            // EndDate VALIDATION
            $('#taskEndDate').focusout(function () {
                var myEndDate = new Date($(this).val());
                var myStartDate = new Date($('#taskStartDate').val());
                var currentdateTime = new Date($.now());
                if (myEndDate < myStartDate) {
                   // alert("Your End Date, ends before your Start Date.");
                    $('#taskErrors').text("Your End Date, ends before your Start Date.");
                    endDateVal = false; 
                }
                else if (currentdateTime == myEndDate)
                {
                    $('#taskErrors').text("Your End Date, must end after today.");
                    endDateVal = false; 
                }
                else
                {
                    $('#taskErrors').empty();
                    endDateVal = true; 
                }
      
            });

            // StartDate VALIDATION
            $('#taskStartDate').focusout(function () {
                var myStartDate = new Date($(this).val());
                var myEndDate = new Date($('#taskEndDate').val());
                if (myEndDate < myStartDate) {
                    //alert("Your Start Date, ends before your End Date.");
                    $('#taskErrors').text("Your Start Date, ends before your End Date");
                    startDateVal = false;
                }
                else {
                    $('#taskErrors').empty();
                    startDateVal = true;
                }
               
            });

            // Message, CompletionDate)
           
            var completionVal = false;
            var messageVal = false;

            $("#notePost").on('submit', function (e) {


                if (completionVal == false || messageVal == false) {
                    e.preventDefault();
                }

            });

            // Message VALIDATION
            $('#noteMessage').focusout(function () {
                var myNoteMessage = $('#noteMessage').val();

                if (myNoteMessage.length > 255) {
                    $('#noteErrors').text("Note Message must be smaller, try agian.");

                    messageVal = false;
                }
                else if ($.trim(myNoteMessage).length == 0) {
                    $('#noteErrors').text("Please enter a message.");

                    messageVal = false;
                }
                else {
                    $('#noteErrors').empty();

                    messageVal = true;

                }
            });

            // CompletionDate VALIDATION
            $('#noteCompletedDate').focusout(function () {
                var myNoteCompletedDate = new Date($('#noteCompletedDate').val());
                var currentdateTime = new Date($.now());
                if (currentdateTime > myNoteCompletedDate) {
                    $('#noteErrors').text("Enter a completion date after today.");
                    completionVal = false;
                }
                else {
                    $('#noteErrors').empty();
                    completionVal = true;
                }

            });


            if ("@Model.User.Role" == "Admin") {
                $('#TeamManagement').removeClass('hidden');
               
            }
       
        });
   
    </script>



</body>
</html>
